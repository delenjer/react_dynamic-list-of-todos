{"version":3,"sources":["User/User.tsx","Todoitem/Todoitem.tsx","Todolist/Todolist.tsx","api/api.ts","App.tsx","index.tsx"],"names":["User","user","name","Todoitem","todo","id","title","className","completed","Todolist","todos","map","key","API_URL","App","useState","setTodos","filteredTodos","setFilteredTodos","isLoading","setLoading","isloaded","a","Promise","all","fetch","then","response","json","todosFromServer","users","preparedTodos","find","person","userId","filter","typeOfFilter","sort","b","localeCompare","toString","length","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"6PAMaA,G,MAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,oCAAGA,EAAKC,QCCxCC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjC,4BACE,4BAAKA,EAAKC,IACV,4BAAKD,EAAKE,OACV,wBAAIC,UAAU,SAASH,EAAKI,UAAY,QAAU,aAClD,4BAAI,kBAAC,EAAD,CAAMP,KAAMG,EAAKH,UCLZQ,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAEjC,2BAAOH,UAAU,aACf,+BACE,4BACE,kCACA,qCACA,sCACA,sCAGJ,+BACGG,EAAMC,KAAI,SAAAP,GAAI,OACb,kBAAC,EAAD,CAAUQ,IAAKR,EAAKC,GAAID,KAAMA,UCpBhCS,EAAU,uCCkGDC,EA7FC,WAAO,IAAD,EACMC,mBAAyB,IAD/B,mBACbL,EADa,KACNM,EADM,OAEsBD,mBAAQ,YAAqBL,IAFnD,mBAEbO,EAFa,KAEEC,EAFF,OAGYH,oBAAS,GAHrB,mBAGbI,EAHa,KAGFC,EAHE,KAMdC,EAAQ,uCAAG,oCAAAC,EAAA,6DACfF,GAAW,GADI,SAGwBG,QAAQC,IAC7C,CDPGC,MAAM,GAAD,OAAIZ,EAAJ,WACTa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UANtBH,MAAM,GAAD,OAAIZ,EAAJ,WACTa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCOZ,mCAGRC,EAHQ,KAGSC,EAHT,KAOTC,EAAgBF,EAAgBlB,KAAI,SAACP,GACzC,IAAMH,EAAO6B,EACVE,MACC,SAACC,GAAD,OAAYA,EAAO5B,KAAOD,EAAK8B,UAGnC,OAAO,eACF9B,EADL,CAEEH,YAIJe,EAASe,GACTX,GAAW,GACXF,EAAiBa,GArBF,4CAAH,qDAwBRI,EAAS,SAACC,GACd,OAAQA,GACN,IAAK,cACHlB,EAAiB,YAAIR,GAClB2B,MAAK,SAACf,EAAGgB,GAAJ,OAAUhB,EAAEhB,MAAMiC,cAAcD,EAAEhC,WAC1C,MACF,IAAK,aACHY,EAAiB,YAAIR,GAClB2B,MAAK,SAACf,EAAGgB,GAAJ,OAAUhB,EAAErB,KAAKC,KAAKqC,cAAcD,EAAErC,KAAKC,UACnD,MACF,IAAK,kBACHgB,EAAiB,YAAIR,GAClB2B,MAAK,SAACf,EAAGgB,GAAJ,OAAUA,EAAE9B,UAAUgC,WACzBD,cAAcjB,EAAEd,UAAUgC,kBAMrC,OAAK9B,EAAM+B,OAcT,yBAAKlC,UAAU,OACb,wBAAIA,UAAU,SAAd,wBACA,yBAAKA,UAAU,WACb,4BACEA,UAAU,SACVmC,KAAK,SACLC,QAAS,kBAAMR,EAAO,iBAHxB,iBAOA,4BACE5B,UAAU,UACVmC,KAAK,SACLC,QAAS,kBAAMR,EAAO,gBAHxB,gBAOA,4BACE5B,UAAU,SACVmC,KAAK,SACLC,QAAS,kBAAMR,EAAO,qBAHxB,sBAQF,kBAAC,EAAD,CAAUzB,MAAOO,KArCjB,4BACEV,UAAU,eACVmC,KAAK,SACLC,QAAStB,EACTuB,SAAUzB,GAETA,EAAY,aAAe,eC1DpC0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.b22f797d.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => <>{user.name}</>;\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const Todoitem: FC<Props> = ({ todo }) => (\n  <tr>\n    <td>{todo.id}</td>\n    <td>{todo.title}</td>\n    <td className=\"state\">{todo.completed ? 'ready' : 'not ready'}</td>\n    <td><User user={todo.user} /></td>\n  </tr>\n);\n","import React, { FC } from 'react';\nimport { Todoitem } from '../Todoitem/Todoitem';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const Todolist: FC<Props> = ({ todos }) => (\n\n  <table className=\"container\">\n    <thead>\n      <tr>\n        <th>id</th>\n        <th>title</th>\n        <th>status</th>\n        <th>user</th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => (\n        <Todoitem key={todo.id} todo={todo} />\n      ))}\n    </tbody>\n  </table>\n\n);\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n","import React, { useState, FC } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist/Todolist';\nimport { getTodos, getUsers } from './api/api';\n\nconst App: FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<TodoWithUser[]>([...todos]);\n  const [isLoading, setLoading] = useState(false);\n\n\n  const isloaded = async () => {\n    setLoading(true);\n\n    const [todosFromServer, users] = await Promise.all(\n      [getTodos(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo: Todo) => {\n      const user = users\n        .find(\n          (person) => person.id === todo.userId,\n        ) as User;\n\n      return {\n        ...todo,\n        user,\n      };\n    });\n\n    setTodos(preparedTodos);\n    setLoading(false);\n    setFilteredTodos(preparedTodos);\n  };\n\n  const filter = (typeOfFilter: string) => {\n    switch (typeOfFilter) {\n      case 'sortByTitle':\n        setFilteredTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'sortByName':\n        setFilteredTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'sortByCompleted':\n        setFilteredTodos([...todos]\n          .sort((a, b) => b.completed.toString()\n            .localeCompare(a.completed.toString())));\n        break;\n      default:\n    }\n  };\n\n  if (!todos.length) {\n    return (\n      <button\n        className=\"start-button\"\n        type=\"button\"\n        onClick={isloaded}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Loading...' : 'Start Load'}\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Static list of todos</h1>\n      <div className=\"buttons\">\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByTitle')}\n        >\n          Sort by title\n        </button>\n        <button\n          className=\" button\"\n          type=\"button\"\n          onClick={() => filter('sortByName')}\n        >\n          Sort by name\n        </button>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByCompleted')}\n        >\n          Sort by completed\n        </button>\n      </div>\n      <Todolist todos={filteredTodos} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}